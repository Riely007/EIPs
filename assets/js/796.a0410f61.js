(window.webpackJsonp=window.webpackJsonp||[]).push([[796],{1225:function(e,t,a){"use strict";a.r(t);var s=a(46),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("This EIP defines an extension to Node Discovery Protocol v4 to enable authoritative resolution of "),a("RouterLink",{attrs:{to:"/zh/eip-778.html"}},[e._v("Ethereum Node Records (ENR)")]),e._v(".")],1),e._v(" "),a("h1",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("To bridge current and future discovery networks and to aid the implementation of other relay mechanisms for ENR such as DNS, we need a way to request the most up-to-date version of a node record. This EIP provides a way to request it using the existing discovery protocol.")]),e._v(" "),a("h1",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("Implementations of Node Discovery Protocol v4 should support two new packet types, a request and reply of the node record. The existing ping and pong packets are extended with a new field containing the sequence number of the ENR.")]),e._v(" "),a("h3",{attrs:{id:"ping-packet-0x01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ping-packet-0x01"}},[e._v("#")]),e._v(" Ping Packet (0x01)")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("packet-data = [version, from, to, expiration, enr-seq]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("enr-seq")]),e._v(" is the current sequence number of the sending node's record. All other fields retain their existing meaning.")]),e._v(" "),a("h3",{attrs:{id:"pong-packet-0x02"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pong-packet-0x02"}},[e._v("#")]),e._v(" Pong Packet (0x02)")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("packet-data = [to, ping-hash, expiration, enr-seq]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("enr-seq")]),e._v(" is the current sequence number of the sending node's record. All other fields retain their existing meaning.")]),e._v(" "),a("h3",{attrs:{id:"enrrequest-packet-0x05"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enrrequest-packet-0x05"}},[e._v("#")]),e._v(" ENRRequest Packet (0x05)")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("packet-data = [ expiration ]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("When a packet of this type is received, the node should reply with an ENRResponse packet containing the current version of its record.")]),e._v(" "),a("p",[e._v("To guard against amplification attacks, the sender of ENRRequest should have replied to a ping packet recently (just like for FindNode). The "),a("code",[e._v("expiration")]),e._v(" field, a UNIX timestamp, should be handled as for all other existing packets i.e. no reply should be sent if it refers to a time in the past.")]),e._v(" "),a("h3",{attrs:{id:"enrresponse-packet-0x06"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enrresponse-packet-0x06"}},[e._v("#")]),e._v(" ENRResponse Packet (0x06)")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("packet-data = [ request-hash, ENR ]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("This packet is the response to ENRRequest.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("request-hash")]),e._v(" is the hash of the entire ENRRequest packet being replied to.")]),e._v(" "),a("li",[a("code",[e._v("ENR")]),e._v(" is the node record.")])]),e._v(" "),a("p",[e._v("The recipient of the packet should verify that the node record is signed by node who sent ENRResponse.")]),e._v(" "),a("h2",{attrs:{id:"resolving-records"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolving-records"}},[e._v("#")]),e._v(" Resolving Records")]),e._v(" "),a("p",[e._v("To resolve the current record of a node public key, perform a recursive Kademlia lookup using the FindNode, Neighbors packets. When the node is found, send ENRRequest to it and return the record from the response.")]),e._v(" "),a("h1",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{599:function(e,t,a){"use strict";a.r(t);var o=a(46),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),a("p",[e._v("The gas cost of EVM opcodes "),a("code",[e._v("SLOAD")]),e._v(" and "),a("code",[e._v("SSTORE")]),e._v(" increases in order to accommodate extra bandwidth required to propagate block proof together with the block\nheaders and block bodies, as explained "),a("a",{attrs:{href:"https://medium.com/@akhounov/data-from-the-ethereum-stateless-prototype-8c69479c8abc",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("It is part of the State Rent roadmap. This particular change prepares Ethereum for introduction of the block proofs (current understanding is that they\ncan be introuced without a hard fork). The introduction of the block proofs allows any Ethereum node that wishes to receive them, to process transactions\nin the blocks without needing to access the Ethereum state. All necessary information for the execution (and the proof of validity) is continued in the\nblock proofs. In most Ethereum nodes, it will speed up the block processing and reduce the memory footprint of such processing. For mining nodes, however,\nthere will be more work to do to construct and transmit the block proofs. Therefore, the extra charge (payable to the miners) is introduced. In the first\nphase, only contract storage will be covered by the block proofs. It means that the Ethereum nodes will still need access to the accounts in the state,\nbut block proofs will make it optional to have access to contract storage for executing transactions. Therefore, only "),a("code",[e._v("SSTORE")]),e._v(" and "),a("code",[e._v("SLOAD")]),e._v(" opcodes are\naffected.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("There is "),a("a",{attrs:{href:"https://github.com/holiman/vmstats/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("empirical analysis"),a("OutboundLink")],1),e._v(" showing that "),a("code",[e._v("SLOAD")]),e._v(" opcode is currently underpriced in terms\nof execution latency it adds to the block processing. The hypothesis is that it is due to the latency of the database accesses. In the same\nanalysis, "),a("code",[e._v("SSTORE")]),e._v(" is not considered, because its effect on the database accesses can be (and are in many implementations) delayed until the end of\nthe block. Stateless clients approach to the contract storage will largely negate that latency because no database accesses will be required.\nInstead, bandwidth consumption goes up. There is emprical analysis (unpublished, but will be) suggesting that 1 uncached "),a("code",[e._v("SSTORE")]),e._v(" or "),a("code",[e._v("SLOAD")]),e._v(" adds\nat most 1 kB to the block proofs. At the current cost of data transmission (68 gas per byte), this translates to the increase of gas cost of both\noperations by 69k gas. However, in light of proposal in "),a("RouterLink",{attrs:{to:"/eip-2028.html"}},[e._v("EIP-2028")]),e._v(", the increase can be made much smaller.")],1),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("Not very formal at the moment, but will be formalised with more research and prototyping. Gas of operations "),a("code",[e._v("SLOAD")]),e._v(" and "),a("code",[e._v("SSTORE")]),e._v(" increases by "),a("code",[e._v("X")]),e._v(" gas when the storage slots accessed (read by "),a("code",[e._v("SLOAD")]),e._v(" or written by "),a("code",[e._v("SSTORE")]),e._v(") were not previously accessed (by another "),a("code",[e._v("SLOAD")]),e._v(" or "),a("code",[e._v("SSTORE")]),e._v(") during the same transaction.")]),e._v(" "),a("p",[e._v("Future variant (will be possible after the implementation of the "),a("em",[e._v("Gross contract size acccounting")]),e._v(") is researched, where the increase is varied\ndepending on the size of the contract storage, i.e. "),a("code",[e._v("SLOAD")]),e._v(" and "),a("code",[e._v("SSTORE")]),e._v(" for smaller contracts will be cheaper.")]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/eip-1884.html"}},[e._v("EIP-1884")]),e._v(" seeks to increase the gas cost of "),a("code",[e._v("SLOAD")]),e._v(" but using a different justification\n(latency of the execution as described in the Motivation). This EIP is likely to increase the cost of "),a("code",[e._v("SLOAD")]),e._v(" by a larger amount, therefore partially\n(because EIP-1884 also proposed other increases) supersedes EIP-1884.")],1),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/eip-2028.html"}},[e._v("EIP-2028")]),e._v(" describes the model that can be used for deciding the gas cost of data transmission. It is relevant\nbecause in the stateless client regime "),a("code",[e._v("SSTORE")]),e._v(" and "),a("code",[e._v("SLOAD")]),e._v(" operations add more data to be transmitted (as well as computation to verify the proofs).")],1),e._v(" "),a("p",[e._v("The main alternate design is the rent proportional to the size of the contract storage, which unfortunately introduces a serious griefing\nvulnerability problem, and so far the solution seems to be in redesigning and rewriting smart contracts in a way, which makes them not vulnerable.\nHowever, this approach is likely to be very expensive on the non-technical (ecosystem) level.")]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("This change is not backwards compatible and requires hard fork to be activated.\nThere might also be an adverse effect of this change on the already deployed contract. It is expected that after this EIP and\n"),a("RouterLink",{attrs:{to:"/eip-2026.html"}},[e._v("EIP-2026")]),e._v(" (rent prepayment for accounts), the recommendation will be made to raise the gas limit. This can somewhat dampen the\nadverse effect of EIP. The most problematic cases would be with the contracts that assume certain gas costs of "),a("code",[e._v("SLOAD")]),e._v("\nand "),a("code",[e._v("SSTORE")]),e._v(" and hard-code them in their internal gas computations. For others, the cost of interacting with the contract\nstorage will rise and may make some dApps based on such interactions, non-viable. This is a trade off to avoid even bigger\nadverse effect of the rent proportional to the contract storage size. However, more research is needed to more fully\nanalyse the potentially impacted contracts.")],1),e._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),a("p",[e._v("Tests cases will be generated out of a reference implementation.")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("p",[e._v("There will be proof of concept implementation to refine and clarify the specification.")]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=s.exports}}]);